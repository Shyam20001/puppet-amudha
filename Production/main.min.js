import Express from"express";import OpenAI from"openai";import dotenv from"dotenv";import bodyParser from"body-parser";import session from"express-session";const app=Express();const port=2400;app.set("view engine","pug");app.use(Express.json());app.use(Express.static("public"));app.use(bodyParser.json());app.use(bodyParser.urlencoded({extended:true}));dotenv.config();const openai=new OpenAI({apiKey:process.env.OPENAI_key});app.use(session({secret:process.env.Session,resave:false,saveUninitialized:true}));import{MongoClient}from"mongodb";const url=process.env.MONGO_URI;const dbName="test";async function connectToMongoDB(){const client=new MongoClient(url);try{await client.connect();console.log("Connected to MongoDB server");const db=client.db(dbName);return{db:db,client:client}}catch(error){console.error("Error connecting to MongoDB:",error);throw error}}async function saveChatToMongoDB(chat){let client;try{const{db:db,client:connectedClient}=await connectToMongoDB();client=connectedClient;const collection=db.collection("openai");const result=await collection.insertOne(chat);console.log("Chat saved to MongoDB:",result.insertedId)}catch(error){console.error("Error saving chat to MongoDB:",error);throw error}finally{if(client){await client.close();console.log("MongoDB client disconnected")}}}app.use(Express.static("public"));app.get("/",((req,res)=>{res.render("index")}));app.post("/isauthenticated",((req,res)=>{const userval=req.body.userval;if(userval===process.env.SecretKey){if(!req.session.gptAccessed){req.session.authenticated=true;req.session.gptAccessed=true;res.render("gpt")}else{res.redirect("/")}}else{res.redirect("/")}}));app.post("/chat",(async(req,res)=>{const userMessage=req.body.message;try{const completion=await openai.chat.completions.create({messages:[{role:"user",content:userMessage}],model:"gpt-3.5-turbo"});const gptResponse=completion.choices[0].message.content;res.json({message:gptResponse});const chat={date:new Date,user:req.body.message,gpt:completion.choices[0].message.content};await saveChatToMongoDB(chat)}catch(error){console.error("Error processing message:",error);res.status(500).json({error:"An error occurred while processing the message"})}}));app.listen(port,(()=>{console.log(`Server is running @http://localhost:${port}/`)}));