const express=require("express");const puppeteer=require("puppeteer-extra");const StealthPlugin=require("puppeteer-extra-plugin-stealth");puppeteer.use(StealthPlugin());const app=express();const port=3e3;let browser,page;(async()=>{try{browser=await puppeteer.launch({headless:true});page=await browser.newPage();await page.setViewport({width:1280,height:720});await page.goto("https://chatgpt.com/");app.use(express.static("public"));app.set("view engine","pug");app.set("views",__dirname+"/views");app.get("/",((e,t)=>{t.render("index")}));app.get("/chat",(async(e,t)=>{try{const r=e.query.prompt;await page.waitForSelector('textarea[placeholder="Message ChatGPT"]',{visible:true});await page.type('textarea[placeholder="Message ChatGPT"]',r);await page.keyboard.press("Enter");await new Promise((e=>setTimeout(e,12e3)));const a=await page.content();const p=extractTextFromPTags(a);t.send(p.join("\n"))}catch(e){console.error("Error during page interaction:",e);t.status(500).send("Internal Server Error")}}));app.listen(port,(()=>{console.log(`Server listening on port ${port}`)}))}catch(e){console.error("Error launching browser:",e)}})();function extractTextFromPTags(e){const t=/<p.*?>(.*?)<\/p>/gis;let r;const a=[];while((r=t.exec(e))!==null){const e=r[1].trim();if(!e.toLowerCase().includes("chatgpt can make mistakes. check important info.")){a.push(e)}}return a}
//# sourceMappingURL=main.min.js.map